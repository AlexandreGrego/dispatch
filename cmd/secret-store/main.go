///////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"

	loads "github.com/go-openapi/loads"
	swag "github.com/go-openapi/swag"
	flags "github.com/jessevdk/go-flags"

	secretstore "gitlab.eng.vmware.com/serverless/serverless/pkg/secret-store"
	"gitlab.eng.vmware.com/serverless/serverless/pkg/secret-store/gen/restapi"
	"gitlab.eng.vmware.com/serverless/serverless/pkg/secret-store/gen/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func configureFlags() []swag.CommandLineOptionsGroup {
	return []swag.CommandLineOptionsGroup{
		swag.CommandLineOptionsGroup{
			ShortDescription: "Secret Store Flags",
			LongDescription:  "",
			Options:          &secretstore.SecretStoreFlags,
		},
	}
}

func main() {

	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewSecretStoreAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Secret Store"
	parser.LongDescription = "An API for managing secrets for serverless functions."

	optsGroups := configureFlags()
	for _, optsGroup := range optsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	handlers, err := secretstore.NewHandlers()

	secretstore.ConfigureHandlers(api, handlers)

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}
}
