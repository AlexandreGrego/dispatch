///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"

	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"gitlab.eng.vmware.com/serverless/serverless/pkg/config"
	iam "gitlab.eng.vmware.com/serverless/serverless/pkg/identity-manager"
	"gitlab.eng.vmware.com/serverless/serverless/pkg/identity-manager/gen/restapi"
	"gitlab.eng.vmware.com/serverless/serverless/pkg/identity-manager/gen/restapi/operations"
)

func main() {

	config.Global = config.LoadConfiguration("config.dev.json")

	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewIdentityManagerAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Identity Manager"
	parser.LongDescription = "VMware Serverless - Identity Management APIs\n"

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	authService := iam.NewAuthService(config.Global)
	iam.ConfigureHandlers(api, authService)
	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
