swagger: '2.0'
info:
  description: |
    This is the API server for the serverless function manager service.
  version: 1.0.0
  title: Function Manager
  contact:
    email: kstepniewski@vmware.com
tags:
- name: Store
  description: Crud operations on functions
- name: Runner
  description: Execution operations on functions
schemes:
- http
basePath: /v1/function
paths:
  /:
    post:
      tags:
      - Store
      summary: Add a few function
      operationId: addFunction
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: function object
        required: true
        schema:
          $ref: '#/definitions/Function'
      responses:
        405:
          description: Invalid input
        202:
          description: Function accepted for creation
          schema:
            $ref: '#/definitions/Function'
    get:
      tags:
      - Store
      summary: List all existing functions
      operationId: getFunctions
      produces:
      - application/json
      parameters:
      - in: query
        type: string
        name: state
        description: Function state
      - in: query
        type: array
        name: tags
        description: Filter on function tags
        items:
          type: string
        collectionFormat: 'multi'
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Function'
        default:
          description: Custom error
          schema:
            $ref: '#/definitions/Error'

  /{functionName}:
    parameters:
    - in: path
      name: functionName
      description: Name of function to work on
      required: true
      type: string
      pattern: '^[\w\d\-]+$'
    get:
      tags:
      - Store
      summary: Find function by Name
      description: Returns a single function
      operationId: getFunctionByName
      produces:
      - application/json
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Function'
        400:
          description: Invalid Name supplied
        404:
          description: Function not found
    patch:
      tags:
      - Store
      summary: Updates a function
      operationId: updateFunctionByName
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/Function'
      responses:
        200:
          description: Successful update
          schema:
            $ref: '#/definitions/Function'
        400:
          description: Invalid input
        404:
          description: Function not found
    delete:
      tags:
      - Store
      summary: Deletes a function
      operationId: deleteFunctionByName
      produces:
      - application/json
      responses:
        204:
          description: Successful deletion
        400:
          description: Invalid Name supplied
        404:
          description: Function not found
  /{functionName}/runs:
    parameters:
    - in: path
      name: functionName
      description: Name of function to run
      required: true
      type: string
      pattern: '^[\w\d\-]+$'
    post:
      tags:
      - Runner
      summary: Run a function
      operationId: runFunction
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/Run'
      responses:
        200:
          description: Successful execution (blocking call)
          schema:
            $ref: '#/definitions/Run'
        202:
          description: Execution started (non-blocking call)
          schema:
            $ref: '#/definitions/Run'
        404:
          description: Function not found
        500:
          description: Execution failed (blocking call)
    get:
      tags:
      - Runner
      summary: Get function runs that are being executed
      operationId: getRuns
      produces:
      - application/json
      responses:
        200:
          description: List of function runs
          schema:
            type: array
            items:
              $ref: '#/definitions/Run'
        404:
          description: Function not found
  /{functionName}/runs/{runID}:
    parameters:
    - in: path
      name: functionName
      description: Name of function to retrieve a run for
      required: true
      type: string
      pattern: '^[\w\d\-]+$'
    - in: path
      name: runID
      description: ID of run to retrieve
      required: true
      type: string
      format: uuid
    get:
      tags:
      - Runner
      summary: Get function run by its ID
      operationId: getRunById
      produces:
      - application/json
      responses:
        200:
          description: Function Run
          schema:
            $ref: '#/definitions/Run'
        404:
          description: Function or Run not found
definitions:
  Tag:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  State:
    type: string
    enum:
    - INITIALIZED
    - CREATING
    - READY
    - ERROR
    - DELETED
  Schema:
    type: object
    properties:
      in:
        type: string
      out:
        type: string
  Function:
    type: object
    required:
    - name
    - code
    - image
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        pattern: '^[\w\d\-]+$'
      image:
        type: string
      code:
        type: string
      schema:
        $ref: '#/definitions/Schema'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      createdTime:
        type: integer
      modifiedTime:
        type: integer
      state:
        $ref: '#/definitions/State'
  Run:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      executedTime:
        type: integer
        readOnly: true
      finishedTime:
        type: integer
        readOnly: true
      input:
        type: object
      output:
        type: object
        readOnly: true
      blocking:
        type: boolean
      secrets:
        type: array
        items:
          type: string
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string

