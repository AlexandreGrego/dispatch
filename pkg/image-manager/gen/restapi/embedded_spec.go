///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API server for the serverless image manager service.\n",
    "title": "Image Manager",
    "contact": {
      "email": "bjung@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/image",
  "paths": {
    "/": {
      "get": {
        "description": "List all images",
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "Get all images",
        "operationId": "getImages",
        "parameters": [
          {
            "type": "string",
            "description": "image runtime language",
            "name": "language",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter on image tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "Add a new image",
        "operationId": "addImage",
        "parameters": [
          {
            "description": "Image object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Image"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/base": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "baseImage"
        ],
        "summary": "List all existing base images",
        "operationId": "getBaseImages",
        "parameters": [
          {
            "type": "string",
            "description": "Base image runtime/language",
            "name": "runtime",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter on base image tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseImage"
              }
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "baseImage"
        ],
        "summary": "Add a new base image",
        "operationId": "addBaseImage",
        "parameters": [
          {
            "description": "Base image object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/base/{baseImageName}": {
      "get": {
        "description": "Returns a single base image",
        "produces": [
          "application/json"
        ],
        "tags": [
          "baseImage"
        ],
        "summary": "Find base image by Name",
        "operationId": "getBaseImageByName",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Base image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "baseImage"
        ],
        "summary": "Updates a base image",
        "operationId": "updateBaseImageByName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "baseImage"
        ],
        "summary": "Deletes a base image",
        "operationId": "deleteBaseImageByName",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Base image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of base image to return",
          "name": "baseImageName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/{imageName}": {
      "get": {
        "description": "Returns a single image",
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "Find image by ID",
        "operationId": "getImageByName",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "Updates an image",
        "operationId": "updateImageByName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated",
            "schema": {
              "$ref": "#/definitions/BaseImage"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "Deletes an image",
        "operationId": "deleteImageByName",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of image to return",
          "name": "imageName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "BaseImage": {
      "type": "object",
      "required": [
        "name",
        "dockerUrl",
        "language"
      ],
      "properties": {
        "createdTime": {
          "type": "integer"
        },
        "dockerUrl": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "language": {
          "$ref": "#/definitions/Language"
        },
        "name": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "public": {
          "type": "boolean",
          "default": false
        },
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spec": {
          "$ref": "#/definitions/Spec"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Image": {
      "type": "object",
      "required": [
        "name",
        "baseImageName"
      ],
      "properties": {
        "baseImageName": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "createdTime": {
          "type": "integer"
        },
        "dockerUrl": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spec": {
          "$ref": "#/definitions/Spec"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Language": {
      "type": "string",
      "enum": [
        "python2",
        "python3",
        "nodejs6"
      ]
    },
    "Spec": {
      "type": "string",
      "enum": [
        "CONFIGURE",
        "CREATE",
        "DELETE"
      ]
    },
    "Status": {
      "type": "string",
      "enum": [
        "INITIALIZED",
        "CREATING",
        "READY",
        "ERROR",
        "DELETED"
      ]
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Operations on base-images",
      "name": "baseImage"
    },
    {
      "description": "Operations on images",
      "name": "image"
    },
    {
      "description": "Operations on system packages",
      "name": "systemPackage"
    },
    {
      "description": "Operations on runtime packages",
      "name": "runtimePackage"
    }
  ]
}`))
}
