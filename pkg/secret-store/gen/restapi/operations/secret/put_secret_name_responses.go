///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gitlab.eng.vmware.com/serverless/serverless/pkg/secret-store/gen/models"
)

// PutSecretNameCreatedCode is the HTTP code returned for type PutSecretNameCreated
const PutSecretNameCreatedCode int = 201

/*PutSecretNameCreated The updated secret

swagger:response putSecretNameCreated
*/
type PutSecretNameCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Secret `json:"body,omitempty"`
}

// NewPutSecretNameCreated creates PutSecretNameCreated with default headers values
func NewPutSecretNameCreated() *PutSecretNameCreated {
	return &PutSecretNameCreated{}
}

// WithPayload adds the payload to the put secret name created response
func (o *PutSecretNameCreated) WithPayload(payload *models.Secret) *PutSecretNameCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put secret name created response
func (o *PutSecretNameCreated) SetPayload(payload *models.Secret) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSecretNameCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutSecretNameNotFoundCode is the HTTP code returned for type PutSecretNameNotFound
const PutSecretNameNotFoundCode int = 404

/*PutSecretNameNotFound Resource Not Found if no secret exists with the given name

swagger:response putSecretNameNotFound
*/
type PutSecretNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutSecretNameNotFound creates PutSecretNameNotFound with default headers values
func NewPutSecretNameNotFound() *PutSecretNameNotFound {
	return &PutSecretNameNotFound{}
}

// WithPayload adds the payload to the put secret name not found response
func (o *PutSecretNameNotFound) WithPayload(payload *models.Error) *PutSecretNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put secret name not found response
func (o *PutSecretNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSecretNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutSecretNameDefault generic error

swagger:response putSecretNameDefault
*/
type PutSecretNameDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutSecretNameDefault creates PutSecretNameDefault with default headers values
func NewPutSecretNameDefault(code int) *PutSecretNameDefault {
	if code <= 0 {
		code = 500
	}

	return &PutSecretNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put secret name default response
func (o *PutSecretNameDefault) WithStatusCode(code int) *PutSecretNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put secret name default response
func (o *PutSecretNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put secret name default response
func (o *PutSecretNameDefault) WithPayload(payload *models.Error) *PutSecretNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put secret name default response
func (o *PutSecretNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSecretNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
