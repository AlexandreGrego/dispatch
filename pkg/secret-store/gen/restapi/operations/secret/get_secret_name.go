///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSecretNameHandlerFunc turns a function with the right signature into a get secret name handler
type GetSecretNameHandlerFunc func(GetSecretNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSecretNameHandlerFunc) Handle(params GetSecretNameParams) middleware.Responder {
	return fn(params)
}

// GetSecretNameHandler interface for that can handle valid get secret name params
type GetSecretNameHandler interface {
	Handle(GetSecretNameParams) middleware.Responder
}

// NewGetSecretName creates a new http.Handler for the get secret name operation
func NewGetSecretName(ctx *middleware.Context, handler GetSecretNameHandler) *GetSecretName {
	return &GetSecretName{Context: ctx, Handler: handler}
}

/*GetSecretName swagger:route GET /{secretName} secret getSecretName

GetSecretName get secret name API

*/
type GetSecretName struct {
	Context *middleware.Context
	Handler GetSecretNameHandler
}

func (o *GetSecretName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSecretNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
