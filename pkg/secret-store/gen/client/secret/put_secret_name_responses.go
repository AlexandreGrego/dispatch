///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/serverless/serverless/pkg/secret-store/gen/models"
)

// PutSecretNameReader is a Reader for the PutSecretName structure.
type PutSecretNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecretNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutSecretNameCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPutSecretNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutSecretNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutSecretNameCreated creates a PutSecretNameCreated with default headers values
func NewPutSecretNameCreated() *PutSecretNameCreated {
	return &PutSecretNameCreated{}
}

/*PutSecretNameCreated handles this case with default header values.

The updated secret
*/
type PutSecretNameCreated struct {
	Payload *models.Secret
}

func (o *PutSecretNameCreated) Error() string {
	return fmt.Sprintf("[PUT /{secretName}][%d] putSecretNameCreated  %+v", 201, o.Payload)
}

func (o *PutSecretNameCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Secret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSecretNameNotFound creates a PutSecretNameNotFound with default headers values
func NewPutSecretNameNotFound() *PutSecretNameNotFound {
	return &PutSecretNameNotFound{}
}

/*PutSecretNameNotFound handles this case with default header values.

Resource Not Found if no secret exists with the given name
*/
type PutSecretNameNotFound struct {
	Payload *models.Error
}

func (o *PutSecretNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /{secretName}][%d] putSecretNameNotFound  %+v", 404, o.Payload)
}

func (o *PutSecretNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSecretNameDefault creates a PutSecretNameDefault with default headers values
func NewPutSecretNameDefault(code int) *PutSecretNameDefault {
	return &PutSecretNameDefault{
		_statusCode: code,
	}
}

/*PutSecretNameDefault handles this case with default header values.

generic error
*/
type PutSecretNameDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the put secret name default response
func (o *PutSecretNameDefault) Code() int {
	return o._statusCode
}

func (o *PutSecretNameDefault) Error() string {
	return fmt.Sprintf("[PUT /{secretName}][%d] PutSecretName default  %+v", o._statusCode, o.Payload)
}

func (o *PutSecretNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
