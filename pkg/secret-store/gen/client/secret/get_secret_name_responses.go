///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/serverless/serverless/pkg/secret-store/gen/models"
)

// GetSecretNameReader is a Reader for the GetSecretName structure.
type GetSecretNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSecretNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSecretNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetSecretNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSecretNameOK creates a GetSecretNameOK with default headers values
func NewGetSecretNameOK() *GetSecretNameOK {
	return &GetSecretNameOK{}
}

/*GetSecretNameOK handles this case with default header values.

The secret identified by the secretName
*/
type GetSecretNameOK struct {
	Payload *models.Secret
}

func (o *GetSecretNameOK) Error() string {
	return fmt.Sprintf("[GET /{secretName}][%d] getSecretNameOK  %+v", 200, o.Payload)
}

func (o *GetSecretNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Secret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretNameNotFound creates a GetSecretNameNotFound with default headers values
func NewGetSecretNameNotFound() *GetSecretNameNotFound {
	return &GetSecretNameNotFound{}
}

/*GetSecretNameNotFound handles this case with default header values.

Resource Not Found if no secret exists with the given name
*/
type GetSecretNameNotFound struct {
	Payload *models.Error
}

func (o *GetSecretNameNotFound) Error() string {
	return fmt.Sprintf("[GET /{secretName}][%d] getSecretNameNotFound  %+v", 404, o.Payload)
}

func (o *GetSecretNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
