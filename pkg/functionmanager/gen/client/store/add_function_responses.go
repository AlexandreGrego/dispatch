///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/serverless/serverless/pkg/functionmanager/gen/models"
)

// AddFunctionReader is a Reader for the AddFunction structure.
type AddFunctionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddFunctionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewAddFunctionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 405:
		result := NewAddFunctionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddFunctionAccepted creates a AddFunctionAccepted with default headers values
func NewAddFunctionAccepted() *AddFunctionAccepted {
	return &AddFunctionAccepted{}
}

/*AddFunctionAccepted handles this case with default header values.

Function accepted for creation
*/
type AddFunctionAccepted struct {
	Payload *models.Function
}

func (o *AddFunctionAccepted) Error() string {
	return fmt.Sprintf("[POST /][%d] addFunctionAccepted  %+v", 202, o.Payload)
}

func (o *AddFunctionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Function)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddFunctionMethodNotAllowed creates a AddFunctionMethodNotAllowed with default headers values
func NewAddFunctionMethodNotAllowed() *AddFunctionMethodNotAllowed {
	return &AddFunctionMethodNotAllowed{}
}

/*AddFunctionMethodNotAllowed handles this case with default header values.

Invalid input
*/
type AddFunctionMethodNotAllowed struct {
}

func (o *AddFunctionMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /][%d] addFunctionMethodNotAllowed ", 405)
}

func (o *AddFunctionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
