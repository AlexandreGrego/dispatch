///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new store API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for store API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddFunction adds a few function
*/
func (a *Client) AddFunction(params *AddFunctionParams) (*AddFunctionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFunction",
		Method:             "POST",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddFunctionAccepted), nil

}

/*
DeleteFunctionByName deletes a function
*/
func (a *Client) DeleteFunctionByName(params *DeleteFunctionByNameParams) (*DeleteFunctionByNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFunctionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFunctionByName",
		Method:             "DELETE",
		PathPattern:        "/{functionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFunctionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFunctionByNameNoContent), nil

}

/*
GetFunctionByName finds function by name

Returns a single function
*/
func (a *Client) GetFunctionByName(params *GetFunctionByNameParams) (*GetFunctionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunctionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFunctionByName",
		Method:             "GET",
		PathPattern:        "/{functionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFunctionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFunctionByNameOK), nil

}

/*
GetFunctions lists all existing functions
*/
func (a *Client) GetFunctions(params *GetFunctionsParams) (*GetFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunctionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFunctions",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFunctionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFunctionsOK), nil

}

/*
UpdateFunctionByName updates a function
*/
func (a *Client) UpdateFunctionByName(params *UpdateFunctionByNameParams) (*UpdateFunctionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFunctionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFunctionByName",
		Method:             "PATCH",
		PathPattern:        "/{functionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFunctionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFunctionByNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
