///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteFunctionByNameHandlerFunc turns a function with the right signature into a delete function by name handler
type DeleteFunctionByNameHandlerFunc func(DeleteFunctionByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteFunctionByNameHandlerFunc) Handle(params DeleteFunctionByNameParams) middleware.Responder {
	return fn(params)
}

// DeleteFunctionByNameHandler interface for that can handle valid delete function by name params
type DeleteFunctionByNameHandler interface {
	Handle(DeleteFunctionByNameParams) middleware.Responder
}

// NewDeleteFunctionByName creates a new http.Handler for the delete function by name operation
func NewDeleteFunctionByName(ctx *middleware.Context, handler DeleteFunctionByNameHandler) *DeleteFunctionByName {
	return &DeleteFunctionByName{Context: ctx, Handler: handler}
}

/*DeleteFunctionByName swagger:route DELETE /{functionName} Store deleteFunctionByName

Deletes a function

*/
type DeleteFunctionByName struct {
	Context *middleware.Context
	Handler DeleteFunctionByNameHandler
}

func (o *DeleteFunctionByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteFunctionByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
