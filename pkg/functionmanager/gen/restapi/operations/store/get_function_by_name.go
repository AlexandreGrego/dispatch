///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFunctionByNameHandlerFunc turns a function with the right signature into a get function by name handler
type GetFunctionByNameHandlerFunc func(GetFunctionByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFunctionByNameHandlerFunc) Handle(params GetFunctionByNameParams) middleware.Responder {
	return fn(params)
}

// GetFunctionByNameHandler interface for that can handle valid get function by name params
type GetFunctionByNameHandler interface {
	Handle(GetFunctionByNameParams) middleware.Responder
}

// NewGetFunctionByName creates a new http.Handler for the get function by name operation
func NewGetFunctionByName(ctx *middleware.Context, handler GetFunctionByNameHandler) *GetFunctionByName {
	return &GetFunctionByName{Context: ctx, Handler: handler}
}

/*GetFunctionByName swagger:route GET /{functionName} Store getFunctionByName

Find function by Name

Returns a single function

*/
type GetFunctionByName struct {
	Context *middleware.Context
	Handler GetFunctionByNameHandler
}

func (o *GetFunctionByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFunctionByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
