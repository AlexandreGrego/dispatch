///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRunsParams creates a new GetRunsParams object
// with the default values initialized.
func NewGetRunsParams() GetRunsParams {
	var ()
	return GetRunsParams{}
}

// GetRunsParams contains all the bound params for the get runs operation
// typically these are obtained from a http.Request
//
// swagger:parameters getRuns
type GetRunsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Name of function to run
	  Required: true
	  Pattern: ^[\w\d\-]+$
	  In: path
	*/
	FunctionName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetRunsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rFunctionName, rhkFunctionName, _ := route.Params.GetOK("functionName")
	if err := o.bindFunctionName(rFunctionName, rhkFunctionName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRunsParams) bindFunctionName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.FunctionName = raw

	if err := o.validateFunctionName(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetRunsParams) validateFunctionName(formats strfmt.Registry) error {

	if err := validate.Pattern("functionName", "path", o.FunctionName, `^[\w\d\-]+$`); err != nil {
		return err
	}

	return nil
}
