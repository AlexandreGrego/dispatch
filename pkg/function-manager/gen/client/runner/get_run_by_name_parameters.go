///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRunByNameParams creates a new GetRunByNameParams object
// with the default values initialized.
func NewGetRunByNameParams() *GetRunByNameParams {
	var ()
	return &GetRunByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunByNameParamsWithTimeout creates a new GetRunByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRunByNameParamsWithTimeout(timeout time.Duration) *GetRunByNameParams {
	var ()
	return &GetRunByNameParams{

		timeout: timeout,
	}
}

// NewGetRunByNameParamsWithContext creates a new GetRunByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRunByNameParamsWithContext(ctx context.Context) *GetRunByNameParams {
	var ()
	return &GetRunByNameParams{

		Context: ctx,
	}
}

// NewGetRunByNameParamsWithHTTPClient creates a new GetRunByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRunByNameParamsWithHTTPClient(client *http.Client) *GetRunByNameParams {
	var ()
	return &GetRunByNameParams{
		HTTPClient: client,
	}
}

/*GetRunByNameParams contains all the parameters to send to the API endpoint
for the get run by name operation typically these are written to a http.Request
*/
type GetRunByNameParams struct {

	/*FunctionName
	  Name of function to retrieve a run for

	*/
	FunctionName string
	/*RunName
	  name of run to retrieve

	*/
	RunName strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get run by name params
func (o *GetRunByNameParams) WithTimeout(timeout time.Duration) *GetRunByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get run by name params
func (o *GetRunByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get run by name params
func (o *GetRunByNameParams) WithContext(ctx context.Context) *GetRunByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get run by name params
func (o *GetRunByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get run by name params
func (o *GetRunByNameParams) WithHTTPClient(client *http.Client) *GetRunByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get run by name params
func (o *GetRunByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFunctionName adds the functionName to the get run by name params
func (o *GetRunByNameParams) WithFunctionName(functionName string) *GetRunByNameParams {
	o.SetFunctionName(functionName)
	return o
}

// SetFunctionName adds the functionName to the get run by name params
func (o *GetRunByNameParams) SetFunctionName(functionName string) {
	o.FunctionName = functionName
}

// WithRunName adds the runName to the get run by name params
func (o *GetRunByNameParams) WithRunName(runName strfmt.UUID) *GetRunByNameParams {
	o.SetRunName(runName)
	return o
}

// SetRunName adds the runName to the get run by name params
func (o *GetRunByNameParams) SetRunName(runName strfmt.UUID) {
	o.RunName = runName
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param functionName
	if err := r.SetPathParam("functionName", o.FunctionName); err != nil {
		return err
	}

	// path param runName
	if err := r.SetPathParam("runName", o.RunName.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
