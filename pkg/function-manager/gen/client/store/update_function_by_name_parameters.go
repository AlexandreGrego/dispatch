///////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/serverless/serverless/pkg/function-manager/gen/models"
)

// NewUpdateFunctionByNameParams creates a new UpdateFunctionByNameParams object
// with the default values initialized.
func NewUpdateFunctionByNameParams() *UpdateFunctionByNameParams {
	var ()
	return &UpdateFunctionByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateFunctionByNameParamsWithTimeout creates a new UpdateFunctionByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateFunctionByNameParamsWithTimeout(timeout time.Duration) *UpdateFunctionByNameParams {
	var ()
	return &UpdateFunctionByNameParams{

		timeout: timeout,
	}
}

// NewUpdateFunctionByNameParamsWithContext creates a new UpdateFunctionByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateFunctionByNameParamsWithContext(ctx context.Context) *UpdateFunctionByNameParams {
	var ()
	return &UpdateFunctionByNameParams{

		Context: ctx,
	}
}

// NewUpdateFunctionByNameParamsWithHTTPClient creates a new UpdateFunctionByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateFunctionByNameParamsWithHTTPClient(client *http.Client) *UpdateFunctionByNameParams {
	var ()
	return &UpdateFunctionByNameParams{
		HTTPClient: client,
	}
}

/*UpdateFunctionByNameParams contains all the parameters to send to the API endpoint
for the update function by name operation typically these are written to a http.Request
*/
type UpdateFunctionByNameParams struct {

	/*Body*/
	Body *models.Function
	/*FunctionName
	  Name of function to work on

	*/
	FunctionName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update function by name params
func (o *UpdateFunctionByNameParams) WithTimeout(timeout time.Duration) *UpdateFunctionByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update function by name params
func (o *UpdateFunctionByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update function by name params
func (o *UpdateFunctionByNameParams) WithContext(ctx context.Context) *UpdateFunctionByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update function by name params
func (o *UpdateFunctionByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update function by name params
func (o *UpdateFunctionByNameParams) WithHTTPClient(client *http.Client) *UpdateFunctionByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update function by name params
func (o *UpdateFunctionByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update function by name params
func (o *UpdateFunctionByNameParams) WithBody(body *models.Function) *UpdateFunctionByNameParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update function by name params
func (o *UpdateFunctionByNameParams) SetBody(body *models.Function) {
	o.Body = body
}

// WithFunctionName adds the functionName to the update function by name params
func (o *UpdateFunctionByNameParams) WithFunctionName(functionName string) *UpdateFunctionByNameParams {
	o.SetFunctionName(functionName)
	return o
}

// SetFunctionName adds the functionName to the update function by name params
func (o *UpdateFunctionByNameParams) SetFunctionName(functionName string) {
	o.FunctionName = functionName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateFunctionByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body == nil {
		o.Body = new(models.Function)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param functionName
	if err := r.SetPathParam("functionName", o.FunctionName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
